---
# Source: sealed-secrets/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sealed-secrets
  namespace: sealed-secrets
  labels:
    app.kubernetes.io/name: sealed-secrets
---
# Source: sealed-secrets/templates/cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: secrets-unsealer
  labels:
    app.kubernetes.io/name: sealed-secrets
    app.kubernetes.io/instance: sealed-secrets-controller
rules:
  - apiGroups:
      - bitnami.com
    resources:
      - sealedsecrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - bitnami.com
    resources:
      - sealedsecrets/status
    verbs:
      - update
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - create
      - update
      - delete
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
---
# Source: sealed-secrets/templates/cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: sealed-secrets
  labels:
    app.kubernetes.io/name: sealed-secrets
    app.kubernetes.io/instance: sealed-secrets-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: secrets-unsealer
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: sealed-secrets
    namespace: sealed-secrets
---
# Source: sealed-secrets/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: sealed-secrets-key-admin
  namespace: sealed-secrets
  labels:
    app.kubernetes.io/name: sealed-secrets
rules:
  - apiGroups:
      - ""
    resourceNames:
      - sealed-secrets-key
    resources:
      - secrets
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - create
      - list
---
# Source: sealed-secrets/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: sealed-secrets-service-proxier
  namespace: sealed-secrets
  labels:
    app.kubernetes.io/name: sealed-secrets
rules:
- apiGroups:
  - ""
  resourceNames:
  - 'http:sealed-secrets:'
  - sealed-secrets
  resources:
  - services/proxy
  verbs:
  - create
  - get
---
# Source: sealed-secrets/templates/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: sealed-secrets-key-admin
  namespace: sealed-secrets
  labels:
    app.kubernetes.io/name: sealed-secrets
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: sealed-secrets-key-admin
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: sealed-secrets
    namespace: sealed-secrets
---
# Source: sealed-secrets/templates/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: sealed-secrets-service-proxier
  namespace: sealed-secrets
  labels:
    app.kubernetes.io/name: sealed-secrets
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: sealed-secrets-service-proxier
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:authenticated
---
# Source: sealed-secrets/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sealed-secrets
  namespace: sealed-secrets
  labels:
    app.kubernetes.io/name: sealed-secrets
spec:
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    app.kubernetes.io/name: sealed-secrets
  type: ClusterIP
---
# Source: sealed-secrets/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sealed-secrets
  namespace: sealed-secrets
  labels:
    app.kubernetes.io/name: sealed-secrets
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: sealed-secrets
      app.kubernetes.io/instance: sealed-secrets
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sealed-secrets
        app.kubernetes.io/instance: sealed-secrets
    spec:
      serviceAccountName: sealed-secrets
      containers:
        - name: sealed-secrets
          command:
            - controller
          args:
            - "--update-status"
          image: bitnami/sealed-secrets-controller:v0.23.1
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: http
          volumeMounts:
          - mountPath: /tmp
            name: tmp
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
          resources:
            {}
      securityContext:
      volumes:
      - name: tmp
        emptyDir: {}
